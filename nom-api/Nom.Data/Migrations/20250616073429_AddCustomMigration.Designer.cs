// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nom.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nom.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250616073429_AddCustomMigration")]
    partial class AddCustomMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("auth")
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MealRecipeIndex", b =>
                {
                    b.Property<long>("MealId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("MealId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("meal_recipe_index", "plan");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "auth");
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientComponentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MacroNutrientId")
                        .HasColumnType("bigint");

                    b.Property<long>("MicroNutrientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MacroNutrientId");

                    b.HasIndex("MicroNutrientId");

                    b.ToTable("NutrientComponent", "nutrient");
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Nutrient", "nutrient");
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientGuidelineEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GuidelineBasisTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MaximumMeasurement")
                        .HasColumnType("decimal(18,4)");

                    b.Property<long>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MinimumMeasurement")
                        .HasColumnType("decimal(18,4)");

                    b.Property<long?>("NutrientEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GuidelineBasisTypeId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("NutrientEntityId");

                    b.ToTable("NutrientGuideline", "nutrient");
                });

            modelBuilder.Entity("Nom.Data.Person.PersonAttributeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AttributeTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("OnDate")
                        .HasColumnType("date");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAttribute", "person");
                });

            modelBuilder.Entity("Nom.Data.Person.PersonEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Person", "person");
                });

            modelBuilder.Entity("Nom.Data.Plan.GoalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<long?>("GoalTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GoalTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("Goal", "plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.GoalItemEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsQuantifiable")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MeasurementMaximum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("MeasurementMinimum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("NutrientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeframeTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GoalId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("NutrientId");

                    b.HasIndex("TimeframeTypeId");

                    b.ToTable("GoalItem", "plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.MealEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<long>("MealTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("PlanId");

                    b.ToTable("Meal", "plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.PlanEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Purpose")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.HasKey("Id");

                    b.ToTable("Plan", "plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.RestrictionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BeginDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<long?>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("NutrientId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RestrictionTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("NutrientId");

                    b.HasIndex("PersonId");

                    b.HasIndex("PlanId");

                    b.HasIndex("RestrictionTypeId");

                    b.ToTable("Restriction", "plan");
                });

            modelBuilder.Entity("Nom.Data.Recipe.IngredientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Ingredient", "recipe");
                });

            modelBuilder.Entity("Nom.Data.Recipe.IngredientNutrientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Measurement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("NutrientId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("NutrientId");

                    b.ToTable("IngredientNutrient", "recipe");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint");

                    b.Property<long?>("CuratedById")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("CuratedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<string>("Instructions")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<bool>("IsCurated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<long?>("QuantityMeasurementTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CuratedById");

                    b.HasIndex("QuantityMeasurementTypeId");

                    b.ToTable("Recipe", "recipe");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeIngredientEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Measurement")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredient", "recipe");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeStepEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<byte>("StepNumber")
                        .HasColumnType("smallint");

                    b.Property<long?>("StepTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.HasIndex("StepTypeId");

                    b.ToTable("RecipeStep", "recipe");
                });

            modelBuilder.Entity("Nom.Data.Reference.GroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group", "reference");
                });

            modelBuilder.Entity("Nom.Data.Reference.GroupedReferenceViewEntity", b =>
                {
                    b.Property<string>("GroupDescription")
                        .HasColumnType("text");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReferenceDescription")
                        .HasColumnType("text");

                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReferenceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable((string)null);

                    b.ToView("ReferenceGroupView", "reference");

                    b.HasDiscriminator<long>("GroupId");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Nom.Data.Reference.ReferenceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reference", "reference");
                });

            modelBuilder.Entity("Nom.Data.Shopping.PantryItemEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly>("AcquisitionDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ExpectedExpirationDate")
                        .HasColumnType("date");

                    b.Property<long>("IngredientId")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemStatusTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MeasurementTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Notes")
                        .HasMaxLength(2047)
                        .HasColumnType("character varying(2047)");

                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,4)");

                    b.Property<long?>("ShoppingTripId")
                        .HasColumnType("bigint");

                    b.Property<string>("SourceLocation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("IngredientId");

                    b.HasIndex("ItemStatusTypeId");

                    b.HasIndex("MeasurementTypeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("ShoppingTripId");

                    b.ToTable("PantryItem", "shopping");
                });

            modelBuilder.Entity("Nom.Data.Shopping.ShoppingPreferenceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AutoGenerateShoppingList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IncludePantryItems")
                        .HasColumnType("boolean");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("ShoppingPreference", "shopping");
                });

            modelBuilder.Entity("Nom.Data.Shopping.ShoppingTripEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("ActualDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("PlannedDate")
                        .HasColumnType("date");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("StatusId");

                    b.ToTable("ShoppingTrip", "shopping");
                });

            modelBuilder.Entity("PlanPersonAdministratorIndex", b =>
                {
                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("PlanId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("plan_person_administrator_index", "plan");
                });

            modelBuilder.Entity("PlanPersonIndex", b =>
                {
                    b.Property<long>("PlanId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.HasKey("PlanId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("plan_person_index", "plan");
                });

            modelBuilder.Entity("RecipeTypeIndex", b =>
                {
                    b.Property<long>("RecipeId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecipeTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("RecipeId", "RecipeTypeId");

                    b.HasIndex("RecipeTypeId");

                    b.ToTable("recipe_type_index", "recipe");
                });

            modelBuilder.Entity("ReferenceIndex", b =>
                {
                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.HasKey("ReferenceId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ReferenceIndex", "reference");
                });

            modelBuilder.Entity("ShoppingTripMealIndex", b =>
                {
                    b.Property<long>("ShoppingTripId")
                        .HasColumnType("bigint");

                    b.Property<long>("MealId")
                        .HasColumnType("bigint");

                    b.HasKey("ShoppingTripId", "MealId");

                    b.HasIndex("MealId");

                    b.ToTable("shopping_trip_meal_index", "shopping");
                });

            modelBuilder.Entity("Nom.Data.Reference.CuisineTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(9L);
                });

            modelBuilder.Entity("Nom.Data.Reference.GoalTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(7L);
                });

            modelBuilder.Entity("Nom.Data.Reference.ItemStatusTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(5L);
                });

            modelBuilder.Entity("Nom.Data.Reference.MealTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(1L);
                });

            modelBuilder.Entity("Nom.Data.Reference.MeasurementTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(2L);
                });

            modelBuilder.Entity("Nom.Data.Reference.NutrientTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(8L);
                });

            modelBuilder.Entity("Nom.Data.Reference.RecipeTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(3L);
                });

            modelBuilder.Entity("Nom.Data.Reference.RestrictionTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(6L);
                });

            modelBuilder.Entity("Nom.Data.Reference.ShoppingStatusTypeViewEntity", b =>
                {
                    b.HasBaseType("Nom.Data.Reference.GroupedReferenceViewEntity");

                    b.HasDiscriminator().HasValue(4L);
                });

            modelBuilder.Entity("MealRecipeIndex", b =>
                {
                    b.HasOne("Nom.Data.Plan.MealEntity", null)
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MealRecipeIndex_MealEntity_MealId");

                    b.HasOne("Nom.Data.Recipe.RecipeEntity", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MealRecipeIndex_RecipeEntity_RecipeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientComponentEntity", b =>
                {
                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", "MacroNutrient")
                        .WithMany("MacroComponents")
                        .HasForeignKey("MacroNutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", "MicroNutrient")
                        .WithMany("MicroComponents")
                        .HasForeignKey("MicroNutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MacroNutrient");

                    b.Navigation("MicroNutrient");
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientGuidelineEntity", b =>
                {
                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "GuidelineBasisType")
                        .WithMany()
                        .HasForeignKey("GuidelineBasisTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", null)
                        .WithMany("Guidelines")
                        .HasForeignKey("NutrientEntityId");

                    b.Navigation("GuidelineBasisType");

                    b.Navigation("MeasurementType");
                });

            modelBuilder.Entity("Nom.Data.Person.PersonAttributeEntity", b =>
                {
                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "AttributeType")
                        .WithMany()
                        .HasForeignKey("AttributeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Person.PersonEntity", "Person")
                        .WithMany("Attributes")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Nom.Data.Person.PersonEntity", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nom.Data.Plan.GoalEntity", b =>
                {
                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "GoalType")
                        .WithMany()
                        .HasForeignKey("GoalTypeId");

                    b.HasOne("Nom.Data.Plan.PlanEntity", "Plan")
                        .WithMany("Goals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GoalType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.GoalItemEntity", b =>
                {
                    b.HasOne("Nom.Data.Plan.GoalEntity", "Goal")
                        .WithMany("GoalItems")
                        .HasForeignKey("GoalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Recipe.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId");

                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId");

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "TimeframeType")
                        .WithMany()
                        .HasForeignKey("TimeframeTypeId");

                    b.Navigation("Goal");

                    b.Navigation("Ingredient");

                    b.Navigation("MeasurementType");

                    b.Navigation("Nutrient");

                    b.Navigation("TimeframeType");
                });

            modelBuilder.Entity("Nom.Data.Plan.MealEntity", b =>
                {
                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Plan.PlanEntity", "Plan")
                        .WithMany("Meals")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealType");

                    b.Navigation("Plan");
                });

            modelBuilder.Entity("Nom.Data.Plan.RestrictionEntity", b =>
                {
                    b.HasOne("Nom.Data.Recipe.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId");

                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", "Nutrient")
                        .WithMany()
                        .HasForeignKey("NutrientId");

                    b.HasOne("Nom.Data.Person.PersonEntity", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("Nom.Data.Plan.PlanEntity", "Plan")
                        .WithMany("Restrictions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "RestrictionType")
                        .WithMany()
                        .HasForeignKey("RestrictionTypeId");

                    b.Navigation("Ingredient");

                    b.Navigation("Nutrient");

                    b.Navigation("Person");

                    b.Navigation("Plan");

                    b.Navigation("RestrictionType");
                });

            modelBuilder.Entity("Nom.Data.Recipe.IngredientNutrientEntity", b =>
                {
                    b.HasOne("Nom.Data.Recipe.IngredientEntity", "Ingredient")
                        .WithMany("Nutrients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Nutrient.NutrientEntity", "Nutrient")
                        .WithMany("IngredientNutrients")
                        .HasForeignKey("NutrientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("MeasurementType");

                    b.Navigation("Nutrient");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeEntity", b =>
                {
                    b.HasOne("Nom.Data.Person.PersonEntity", "Creator")
                        .WithMany("CreatedRecipes")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Person.PersonEntity", "Curator")
                        .WithMany("CuratedRecipes")
                        .HasForeignKey("CuratedById");

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "QuantityMeasurementType")
                        .WithMany()
                        .HasForeignKey("QuantityMeasurementTypeId");

                    b.Navigation("Creator");

                    b.Navigation("Curator");

                    b.Navigation("QuantityMeasurementType");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeIngredientEntity", b =>
                {
                    b.HasOne("Nom.Data.Recipe.IngredientEntity", "Ingredient")
                        .WithMany("UsedInRecipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Recipe.RecipeEntity", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("MeasurementType");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeStepEntity", b =>
                {
                    b.HasOne("Nom.Data.Recipe.RecipeEntity", "Recipe")
                        .WithMany("Steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "StepType")
                        .WithMany()
                        .HasForeignKey("StepTypeId");

                    b.Navigation("Recipe");

                    b.Navigation("StepType");
                });

            modelBuilder.Entity("Nom.Data.Shopping.PantryItemEntity", b =>
                {
                    b.HasOne("Nom.Data.Recipe.IngredientEntity", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "ItemStatusType")
                        .WithMany()
                        .HasForeignKey("ItemStatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "MeasurementType")
                        .WithMany()
                        .HasForeignKey("MeasurementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Plan.PlanEntity", "Plan")
                        .WithMany("PantryItems")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Shopping.ShoppingTripEntity", "ShoppingTrip")
                        .WithMany()
                        .HasForeignKey("ShoppingTripId");

                    b.Navigation("Ingredient");

                    b.Navigation("ItemStatusType");

                    b.Navigation("MeasurementType");

                    b.Navigation("Plan");

                    b.Navigation("ShoppingTrip");
                });

            modelBuilder.Entity("Nom.Data.Shopping.ShoppingPreferenceEntity", b =>
                {
                    b.HasOne("Nom.Data.Person.PersonEntity", "Person")
                        .WithOne("ShoppingPreference")
                        .HasForeignKey("Nom.Data.Shopping.ShoppingPreferenceEntity", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Nom.Data.Shopping.ShoppingTripEntity", b =>
                {
                    b.HasOne("Nom.Data.Person.PersonEntity", "Person")
                        .WithMany("ShoppingTrips")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Person");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("PlanPersonAdministratorIndex", b =>
                {
                    b.HasOne("Nom.Data.Person.PersonEntity", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPersonAdministratorIndex_PersonEntity_PersonId");

                    b.HasOne("Nom.Data.Plan.PlanEntity", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPersonAdministratorIndex_PlanEntity_PlanId");
                });

            modelBuilder.Entity("PlanPersonIndex", b =>
                {
                    b.HasOne("Nom.Data.Person.PersonEntity", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPersonIndex_PersonEntity_PersonId");

                    b.HasOne("Nom.Data.Plan.PlanEntity", null)
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PlanPersonIndex_PlanEntity_PlanId");
                });

            modelBuilder.Entity("RecipeTypeIndex", b =>
                {
                    b.HasOne("Nom.Data.Recipe.RecipeEntity", null)
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeTypeIndex_RecipeEntity_RecipeId");

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", null)
                        .WithMany()
                        .HasForeignKey("RecipeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RecipeTypeIndex_ReferenceEntity_RecipeTypeId");
                });

            modelBuilder.Entity("ReferenceIndex", b =>
                {
                    b.HasOne("Nom.Data.Reference.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReferenceIndex_GroupEntity_GroupId");

                    b.HasOne("Nom.Data.Reference.ReferenceEntity", null)
                        .WithMany()
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReferenceIndex_ReferenceEntity_ReferenceId");
                });

            modelBuilder.Entity("ShoppingTripMealIndex", b =>
                {
                    b.HasOne("Nom.Data.Plan.MealEntity", null)
                        .WithMany()
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingTripMealIndex_MealEntity_MealId");

                    b.HasOne("Nom.Data.Shopping.ShoppingTripEntity", null)
                        .WithMany()
                        .HasForeignKey("ShoppingTripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShoppingTripMealIndex_ShoppingTripEntity_ShoppingTripId");
                });

            modelBuilder.Entity("Nom.Data.Nutrient.NutrientEntity", b =>
                {
                    b.Navigation("Guidelines");

                    b.Navigation("IngredientNutrients");

                    b.Navigation("MacroComponents");

                    b.Navigation("MicroComponents");
                });

            modelBuilder.Entity("Nom.Data.Person.PersonEntity", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("CreatedRecipes");

                    b.Navigation("CuratedRecipes");

                    b.Navigation("ShoppingPreference");

                    b.Navigation("ShoppingTrips");
                });

            modelBuilder.Entity("Nom.Data.Plan.GoalEntity", b =>
                {
                    b.Navigation("GoalItems");
                });

            modelBuilder.Entity("Nom.Data.Plan.PlanEntity", b =>
                {
                    b.Navigation("Goals");

                    b.Navigation("Meals");

                    b.Navigation("PantryItems");

                    b.Navigation("Restrictions");
                });

            modelBuilder.Entity("Nom.Data.Recipe.IngredientEntity", b =>
                {
                    b.Navigation("Nutrients");

                    b.Navigation("UsedInRecipes");
                });

            modelBuilder.Entity("Nom.Data.Recipe.RecipeEntity", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
